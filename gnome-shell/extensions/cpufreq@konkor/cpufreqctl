#!/usr/bin/env bash

VERSION='19'
cpucount=`cat /proc/cpuinfo|grep processor|wc -l`
FLROOT=/sys/devices/system/cpu

if [ $# -lt 1 ]
then
    echo "Package version: "$VERSION
	echo "USAGE: cpufreqctl [OPTION] [VALUE]"
	echo "OPTIONS [gov|list|driver|info|freq|set|turbo|min|max|boost|minf|maxf]"
	echo "Current driver"
	cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver
	echo "Available governors"
	cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors
	echo "Current cpu0 governor"
	cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
	exit
fi
if [ $1 = "gov" ]
then
  i=0
  ag=''
  if [ $# = 1 ]
  then
    while [ $i -ne $cpucount ]
    do
      if [ $i = 0 ]
      then
        ag=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`
      else
        ag=$ag' '`cat /sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor`
      fi
      i=`expr $i + 1`
    done
    echo $ag
    exit
  fi
  while [ $i -ne $cpucount ]
  do
    FLNM="$FLROOT/cpu"$i"/cpufreq/scaling_governor"
    echo "Setting $FLNM to " $2
    echo $2 > $FLNM
    i=`expr $i + 1`
  done
  exit
fi
if [ $1 = "list" ]
then
	cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors
	exit
fi
if [ $1 = "driver" ]
then
	cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver
	exit
fi
if [ $1 = "info" ]
then
	i=0
	V=0
	M=$(cat "/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq")
	while [ $i -ne $cpucount ]
	do
	    V=$(cat "/sys/devices/system/cpu/cpu"$i"/cpufreq/scaling_cur_freq")
	    if [[ $V > $M ]]
	    then
	        M=$V
	    fi
		i=`expr $i + 1`
	done
	echo "$M"
	exit
fi
if [ $1 = "info_avg" ]
then
	i=1
	V=0
	M=$(cat "/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq")
	while [ $i -ne $cpucount ]
	do
	    V=$(cat "/sys/devices/system/cpu/cpu"$i"/cpufreq/scaling_cur_freq")
	    M=`expr $M + $V`
	    i=`expr $i + 1`
	done
	echo `expr $M / $cpucount`
	exit
fi
if [ $1 = "freq" ]
then
	cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies
	exit
fi
if [ $1 = "set" ]
then
	if [ $# = 1 ]
	then
		echo "available frequencies"
		cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies
		echo "current cpu frequency"
		cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
		exit
	fi
	i=0
	while [ $i -ne $cpucount ]
	do
		FLNM="$FLROOT/cpu"$i"/cpufreq/scaling_setspeed"
		echo "Setting $FLNM to " $2
		echo $2 > $FLNM
		i=`expr $i + 1`
	done
	exit
fi
if [ $1 = "turbo" ]
then
	if [ $# = 1 ]
	then
		cat /sys/devices/system/cpu/intel_pstate/no_turbo
		exit
	fi
	echo "Setting TURBO to " $2
	echo $2 > /sys/devices/system/cpu/intel_pstate/no_turbo
	exit
fi
if [ $1 = "min" ]
then
	if [ $# = 1 ]
	then
		cat /sys/devices/system/cpu/intel_pstate/min_perf_pct
		exit
	fi
	echo "Setting MIN to " $2
	echo $2 > /sys/devices/system/cpu/intel_pstate/min_perf_pct
	exit
fi
if [ $1 = "max" ]
then
	if [ $# = 1 ]
	then
		cat /sys/devices/system/cpu/intel_pstate/max_perf_pct
		exit
	fi
	echo "Setting MAX to " $2
	echo $2 > /sys/devices/system/cpu/intel_pstate/max_perf_pct
	exit
fi
if [ $1 = "boost" ]
then
	if [ $# = 1 ]
	then
		cat /sys/devices/system/cpu/cpufreq/boost
		exit
	fi
	echo "Setting BOOST to " $2
	echo $2 > /sys/devices/system/cpu/cpufreq/boost
	exit
fi
if [ $1 = "minf" ]
then
	if [ $# = 1 ]
	then
		cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
		exit
	fi
	i=0
	while [ $i -ne $cpucount ]
	do
		FLNM="$FLROOT/cpu"$i"/cpufreq/scaling_min_freq"
		echo "Setting $FLNM to " $2
		echo $2 > $FLNM
		i=`expr $i + 1`
	done
	exit
fi
if [ $1 = "maxf" ]
then
	if [ $# = 1 ]
	then
		cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
		exit
	fi
	i=0
	while [ $i -ne $cpucount ]
	do
		FLNM="$FLROOT/cpu"$i"/cpufreq/scaling_max_freq"
		echo "Setting $FLNM to " $2
		echo $2 > $FLNM
		i=`expr $i + 1`
	done
	exit
fi
if [ $1 = "install" ]
then
    echo 'installing cpufreqctl...'
    cp $0 /usr/bin/
    echo 'installing policy...'
    cp $(dirname "$(readlink -f "$0")")/konkor.cpufreq.policy /usr/share/polkit-1/actions/
    echo 'installing fonts...'
    mkdir -p /usr/share/fonts/truetype/cpufreq
    cp $(dirname "$(readlink -f "$0")")/fonts/cpufreq.ttf /usr/share/fonts/truetype/cpufreq/
    exit
fi
if [ $1 = "update-fonts" ]
then
    fc-cache -f
    exit
fi
if [ $1 = "uninstall" ]
then
    echo 'uninstalling cpufreqctl helper...'
    rm /usr/bin/cpufreqctl
    echo 'uninstalling policy...'
    rm /usr/share/polkit-1/actions/konkor.cpufreq.policy
    echo 'uninstalling fonts...'
    rm -rf /usr/share/fonts/truetype/cpufreq
    exit
fi
if [ $1 = "reset" ]
then
    echo 'reset to default values...'
    dconf reset -f "/org/gnome/shell/extensions/cpufreq/"
    exit
fi
if [ $1 = "version" ]
then
    echo $VERSION
	exit
fi
if [ $1 = "on" ]
then
	if [ $# = 1 ]
	then
		echo "cpufreqctl on CORE"
		exit
	fi
	FLNM="$FLROOT/cpu"$2"/online"
	echo "Power on CPU Core"$2
	echo "1" > $FLNM
	exit
fi
if [ $1 = "off" ]
then
	if [ $# = 1 ]
	then
		echo "cpufreqctl off CORE"
		exit
	fi
	FLNM="$FLROOT/cpu"$2"/online"
	echo "Power off CPU Core"$2
	echo "0" > $FLNM
	exit
fi
if [ $1 = "coreg" ]
then
    if [ $# = 1 ]
	then
		echo "cpufreqctl coreg CORE [GOVERNOR]"
		exit
	fi
	if [ $# = 2 ]
	then
	    cat /sys/devices/system/cpu/cpu$2/cpufreq/scaling_governor
	    exit
	fi
    FLNM="$FLROOT/cpu"$2"/cpufreq/scaling_governor"
	echo "Setting $FLNM to "$3
	echo $3 > $FLNM
	exit
fi
if [ $1 = "coremin" ]
then
    if [ $# = 1 ]
	then
		echo "cpufreqctl coremin CORE [MIN_FREQUENCY]"
		exit
	fi
	if [ $# = 2 ]
	then
		cat /sys/devices/system/cpu/cpu$2/cpufreq/scaling_min_freq
		exit
	fi
	FLNM="$FLROOT/cpu"$2"/cpufreq/scaling_min_freq"
	echo "Setting $FLNM to "$3
	echo $3 > $FLNM
	exit
fi
if [ $1 = "coremax" ]
then
    if [ $# = 1 ]
	then
		echo "cpufreqctl coremax CORE [MAX_FREQUENCY]"
		exit
	fi
	if [ $# = 2 ]
	then
		cat /sys/devices/system/cpu/cpu$2/cpufreq/scaling_max_freq
		exit
	fi
	FLNM="$FLROOT/cpu"$2"/cpufreq/scaling_max_freq"
	echo "Setting $FLNM to "$3
	echo $3 > $FLNM
	exit
fi
if [ $1 = "throttle" ]
then
	i=1
	V=0
	M=$(cat "/sys/devices/system/cpu/cpu0/thermal_throttle/core_throttle_count")
	while [ $i -ne $cpucount ]
	do
	    V=$(cat "/sys/devices/system/cpu/cpu"$i"/thermal_throttle/core_throttle_count")
	    M=`expr $M + $V`
	    i=`expr $i + 1`
	done
	echo "$M"
	exit
fi
if [ $1 = "throttle_events" ]
then
	M=$(journalctl --dmesg --boot --since=yesterday | grep "cpu clock throttled" | wc -l)
	echo "$M"
	exit
fi
if [ $1 = "irqbalance" ]
then
	M=$(ps -A |grep irqbalance)
	echo "$M"
	exit
fi
